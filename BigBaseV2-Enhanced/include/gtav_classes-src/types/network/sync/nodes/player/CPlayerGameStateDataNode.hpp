#pragma once
#include "types/network/sync/CProjectBaseSyncDataNode.hpp"
#include "types/rage/vector.hpp"

class CPlayerGameStateDataNode : CSyncDataNodeInfrequent
{
public:
	uint32_t m_PlayerState;                     //0x00C0
	bool m_ControlsDisabledByScript;            //0x00C4
	bool m_IsMaxArmorAndHealthDefault;          //0x00C5
	bool unk_000C6;                             //0x00C6
	bool m_IsSpectating;                        //0x00C7
	bool m_IsAntagonisticToAnotherPlayer;       //0x00C8
	bool m_NeverTarget;                         //0x00C9
	bool m_UseKinematicPhysics;                 //0x00CA
	bool m_HasTutorialData;                     //0x00CB
	bool m_PendingTutorialChange;               //0x00CC
	bool unk_00CD;                              //0x00CD
	bool m_Respawning;                          //0x00CE
	bool m_WillJackAnyPlayer;                   //0x00CF
	bool m_WillJackWantedPlayers;               //0x00D0
	bool m_DontDragFromCar;                     //0x00D1
	bool m_RandomPedsFlee;                      //0x00D2
	bool m_EveryPedBackAway;                    //0x00D3
	bool m_HasMicrophone;                       //0x00D4
	bool m_IsInvincible;                        //0x00D5
	bool unk_00D6;                              //0x00D6
	bool unk_00D7;                              //0x00D7
	bool m_Seatbelt;                            //0x00D8
	bool unk_00D9;                              //0x00D9
	bool m_BulletProof;                         //0x00DA
	bool m_FireProof;                           //0x00DB
	bool m_ExplosionProof;                      //0x00DC
	bool m_CollisionProof;                      //0x00DD
	bool m_MeleeProof;                          //0x00DE
	bool m_WaterProof;                          //0x00DF
	bool m_SteamProof;                          //0x00E0
	bool unk_00E1;                              //0x00E1
	bool unk_00E2;                              //0x00E2
	bool unk_00E3;                              //0x00E3
	bool unk_00E4;                              //0x00E4
	bool unk_00E5;                              //0x00E5
	bool unk_00E6;                              //0x00E6
	bool unk_00E7;                              //0x00E7
	bool unk_00E8;                              //0x00E8
	bool unk_00E9;                              //0x00E9
	bool unk_00EA;                              //0x00EA
	bool unk_00EB;                              //0x00EB
	bool unk_00EC;                              //0x00EC
	bool unk_00ED;                              //0x00ED
	bool unk_00EE;                              //0x00EE
	bool unk_00EF;                              //0x00EF
	bool unk_00F0;                              //0x00F0
	bool unk_00F1;                              //0x00F1
	bool unk_00F2;                              //0x00F2
	bool unk_00F3;                              //0x00F3
	bool unk_00F4;                              //0x00F4
	bool unk_00F5;                              //0x00F5
	bool unk_00F6;                              //0x00F6
	bool unk_00F7;                              //0x00F7
	bool unk_00F8;                              //0x00F8
	bool unk_00F9;                              //0x00F9
	bool unk_00FA;                              //0x00FA
	bool unk_00FB;                              //0x00FB
	uint32_t unk_00FC;                          //0x00FC
	uint32_t m_MobileRingState;                 //0x0100
	int32_t m_PlayerTeam;                       //0x0104
	float m_AirDragMultiplier;                  //0x0108
	uint32_t m_MaxHealth;                       //0x010C
	uint32_t m_MaxArmor;                        //0x0110
	uint32_t m_JackSpeed;                       //0x0114
	uint16_t m_PlayerIsTargetableByTeam;        //0x0118
	uint32_t m_OverrideReceiveChat;             //0x011C
	uint32_t m_OverrideSendChat;                //0x0120
	bool unk_0124;                              //0x0124
	bool unk_0125;                              //0x0125
	bool unk_0126;                              //0x0126
	bool unk_0127;                              //0x0127
	uint16_t m_SpectatingNetId;                 //0x0128
	uint8_t m_AntagonisticToPlayerId;           //0x012C
	uint8_t m_TutorialIndex;                    //0x012B
	uint8_t m_TutorialInstanceId;               //0x012C
	char pad_012D[2];                           //0x012D
	float m_MicrophoneVolume;                   //0x0130
	uint32_t m_VoiceChannel;                    //0x0134
	bool m_IsOverridingVoiceProximity;          //0x0138
	char pad_0139[7];                           //0x0139
	rage::fvector3 m_VoiceProximity;            //0x0140
	uint32_t unk_0150;                          //0x0150
	uint32_t m_VehicleWeaponIndex;              //0x0154
	bool m_HasVehicleWeaponIndex;               //0x0158
	uint32_t m_DecorCount;                      //0x015C
	uint32_t m_DecorType[3];                    //0x0160
	uint32_t m_DecorValue[3];                   //0x016C
	uint32_t m_DecorNameHash[3];                //0x0178
	bool m_FriendlyFireAllowed;                 //0x0184
	bool unk_0185;                              //0x0185
	uint8_t m_CurrentGarageInstanceIndex;       //0x0186
	uint8_t m_CurrentPropertyId;                //0x0187
	uint8_t unk_0188;                           //0x0188
	uint8_t m_CityDensity;                      //0x0189
	bool m_BattleAware;                         //0x018A
	bool m_VehicleJumpDown;                     //0x018B
	float m_WeaponDefenceModifier;              //0x018C
	float m_WeaponDefenceModifier_2;            //0x0190
	bool m_IsOverridingPopulationControlSphere; //0x0194
	rage::fvector3 m_PopulationControlSphere;   //0x01A0
	uint16_t unk_01B0;                          //0x01B0
	bool new_01B2;                              //0x01B2
	bool new_01B3;                              //0x01B3
	bool pad_01B2;                              //0x01B4
	bool unk_01B3;                              //0x01B5
	bool m_NoCollision;                         //0x01B6
	bool unk_01B5;                              //0x01B7
	bool unk_01B6;                              //0x01B8
	bool m_SuperJump;                           //0x01B9
	bool unk_01B8;                              //0x01BA
	bool unk_01B9;                              //0x01BB
	uint16_t unk_01BA;                          //0x01BC
	uint32_t unk_01BC;                          //0x01C0
	float unk_01C0;                             //0x01C4
	float m_WeaponDamageModifier;               //0x01C8
	float m_MeleeWeaponDamageModifier;          //0x01CC
	float unk_01CC;                             //0x01D0
	bool unk_01D0;                              //0x01D4
	rage::fvector3 unk_01E0;                    //0x01E0
	uint8_t unk_01F0;                           //0x01F0
	uint8_t unk_01F1;                           //0x01F1
	bool unk_01F2;                              //0x01F2
	uint8_t unk_01F3;                           //0x01F3
	bool unk_01F4;                              //0x01F4
	bool unk_01F5;                              //0x01F5
};
static_assert(sizeof(CPlayerGameStateDataNode) == 0x200);
